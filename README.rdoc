= Knife  install

== DESCRIPTION:

This is a Knife plugin for local installation. 

This plugin gives knife the ability to install cookbook recipes, but leave them unmanaged in future chef-client runs.

The use case is, for example to provide a securely configured tomcat and manager instance, which is then further customized by a developer with local administrator rights for their own purposes.

It is a work-around to the issue that developer users often require more flexibility to customize their node than would be permitted with a production installion, and often do not have chef skills to work in the chef paradigm and toolset.

== INSTALLATION:

You need to run this command with root privileges.

Be sure you are running the latest version Chef. Versions earlier than 0.10.0 don't support plugins:

  gem install chef

This plugin is distributed as a Ruby Gem. To install it, run:

  gem install knife-install

== CONFIGURATION:

None as yet

== SUBCOMMANDS:

You need to run these commands with root privileges.

This plugin provides the following Knife subcommands. Specific command options can be found by invoking the subcommand with a <tt>--help</tt> flag

=== Knife install --help

The goal  The main assumption is to bypass chef server and client install and just install a recipe.

=== Knife  install [ENTRY[,ENTRY]]  (options)

=======
This will read your knife configuration <tt>~/.chef/knife.rb</tt> for the validation certificate and Chef server URL and connect to the chef server to download the required cookbooks.

  knife install [ENTRY[,ENTRY]]  (options)

See the `knife node run_list NODE -h` for an example of providing a list of recipes for install.

  knife node run_list add NODE 'role[chef-client],recipe[getting-started],recipe[chef-client::service]' type syntax


=== GUTS / INTERNALS

The  installaton of the    cookbook   is   achieved   by  interfacing to  the    chef Server using  the REST  API to  fetch metaData  and  use  this  metadata   to  download the   correct  cookbooks  . 
Chef provides powerful ways to access the API .  Below   is  a  knife   representation of   how  cookbook meta data  is fetched  and  subsequently  donloaded   to  a  directory

When  a  user  specifies   a  runlist  we  do the   following  
  1.   Create a  ephemral node  using   
      knife node create <ephemeral_node> (options)

  2.   Pass   the   run list  as  a   string  and   let   chef  figure   it  out
      knife  node  <ephemeral_node> runlist add  [RUNLIST]
  
  3.   The REST   Endpointt   /nodes/NODE_NAME/cookbooks endpoint returns the cookbook attributes, definitions, libraries and recipes that are required for this node. The response is a hash of cookbook name and <tt>Chef::CookbookVersion<tt> object.  We simply iterate over each one, and pretty print the cookbook name and the version.  
       knife exec -E '(api.get "nodes/controller/cookbooks").each { |cb| pp cb[0] => cb[1].version }' 

  4.  Pass  the  hash   containing  unique    cookbook  name  and  version   to  a   cookbook   downloader  subroutine  .This  is the standard   Signed   REST  Calls to   download   the   cookbook   files    




== LICENSE:

Author:: Pratik  Dam
Author:: Tom Hodder
Copyright:: Lime Pepper Ltd
License::  Apache License, Version 2.0

